# Use ARM-GCC for crosscompiling
set(CMAKE_SYSTEM_NAME Generic)
set(CMAKE_SYSTEM_PROCESSOR arm)
set(CMAKE_HOST_SYSTEM_NAME Linux)

set (CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER CACHE STRING "")
set (CMAKE_FIND_ROOT_PATH_MODE_LIBRARY NEVER CACHE STRING "")
set (CMAKE_FIND_ROOT_PATH_MODE_INCLUDE NEVER CACHE STRING "")

# Build-dependent flags
set(CMAKE_C_FLAGS_DEBUG "-O0" )
set(CMAKE_CXX_FLAGS_DEBUG "-O0" )
set(CMAKE_C_FLAGS_RELEASE "-O2" )
set(CMAKE_CXX_FLAGS_RELEASE "-O2" )
set(CMAKE_C_FLAGS_MINSIZEREL "-Os" )
set(CMAKE_CXX_FLAGS_MINSIZEREL "-Os" )
set(CMAKE_C_FLAGS_RELWITHDEBINFO "-Og" )
set(CMAKE_CXX_FLAGS_RELWITHDEBINFO "-Og" )

set(TOOLCHAIN_PREFIX arm-none-eabi-)

set(CMAKE_C_COMPILER "${TOOLCHAIN_PREFIX}gcc")
set(CMAKE_ASM_COMPILER ${CMAKE_C_COMPILER} )
set(CMAKE_CXX_COMPILER ${TOOLCHAIN_PREFIX}g++)
set(CMAKE_OBJCOPY ${TOOLCHAIN_PREFIX}objcopy)
set(CMAKE_SIZE ${TOOLCHAIN_PREFIX}size )

set(CMAKE_EXECUTABLE_SUFFIX_ASM ".elf" )
set(CMAKE_EXECUTABLE_SUFFIX_C ".elf" )
set(CMAKE_EXECUTABLE_SUFFIX_CXX ".elf" )

set(CMAKE_TRY_COMPILE_TARGET_TYPE STATIC_LIBRARY )
